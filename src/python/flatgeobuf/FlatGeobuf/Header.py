# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatGeobuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Header(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Header()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHeader(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Header
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Header
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Header
    def Envelope(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Header
    def EnvelopeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # Header
    def EnvelopeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Header
    def EnvelopeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Header
    def GeometryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Header
    def HasZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Header
    def HasM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Header
    def HasT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Header
    def HasTm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Header
    def Columns(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatGeobuf.Column import Column
            obj = Column()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Header
    def ColumnsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Header
    def ColumnsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Header
    def FeaturesCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Header
    def IndexNodeSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 16

    # Header
    def Crs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from FlatGeobuf.Crs import Crs
            obj = Crs()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Header
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Header
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Header
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def HeaderStart(builder): builder.StartObject(14)
def Start(builder):
    return HeaderStart(builder)
def HeaderAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return HeaderAddName(builder, name)
def HeaderAddEnvelope(builder, envelope): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(envelope), 0)
def AddEnvelope(builder, envelope):
    return HeaderAddEnvelope(builder, envelope)
def HeaderStartEnvelopeVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartEnvelopeVector(builder, numElems):
    return HeaderStartEnvelopeVector(builder, numElems)
def HeaderAddGeometryType(builder, geometryType): builder.PrependUint8Slot(2, geometryType, 0)
def AddGeometryType(builder, geometryType):
    return HeaderAddGeometryType(builder, geometryType)
def HeaderAddHasZ(builder, hasZ): builder.PrependBoolSlot(3, hasZ, 0)
def AddHasZ(builder, hasZ):
    return HeaderAddHasZ(builder, hasZ)
def HeaderAddHasM(builder, hasM): builder.PrependBoolSlot(4, hasM, 0)
def AddHasM(builder, hasM):
    return HeaderAddHasM(builder, hasM)
def HeaderAddHasT(builder, hasT): builder.PrependBoolSlot(5, hasT, 0)
def AddHasT(builder, hasT):
    return HeaderAddHasT(builder, hasT)
def HeaderAddHasTm(builder, hasTm): builder.PrependBoolSlot(6, hasTm, 0)
def AddHasTm(builder, hasTm):
    return HeaderAddHasTm(builder, hasTm)
def HeaderAddColumns(builder, columns): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(columns), 0)
def AddColumns(builder, columns):
    return HeaderAddColumns(builder, columns)
def HeaderStartColumnsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartColumnsVector(builder, numElems):
    return HeaderStartColumnsVector(builder, numElems)
def HeaderAddFeaturesCount(builder, featuresCount): builder.PrependUint64Slot(8, featuresCount, 0)
def AddFeaturesCount(builder, featuresCount):
    return HeaderAddFeaturesCount(builder, featuresCount)
def HeaderAddIndexNodeSize(builder, indexNodeSize): builder.PrependUint16Slot(9, indexNodeSize, 16)
def AddIndexNodeSize(builder, indexNodeSize):
    return HeaderAddIndexNodeSize(builder, indexNodeSize)
def HeaderAddCrs(builder, crs): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(crs), 0)
def AddCrs(builder, crs):
    return HeaderAddCrs(builder, crs)
def HeaderAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def AddTitle(builder, title):
    return HeaderAddTitle(builder, title)
def HeaderAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return HeaderAddDescription(builder, description)
def HeaderAddMetadata(builder, metadata): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)
def AddMetadata(builder, metadata):
    return HeaderAddMetadata(builder, metadata)
def HeaderEnd(builder): return builder.EndObject()
def End(builder):
    return HeaderEnd(builder)