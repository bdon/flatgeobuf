# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatGeobuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Column(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Column()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsColumn(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Column
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Column
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Column
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Column
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Column
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Column
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # Column
    def Precision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # Column
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # Column
    def Nullable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # Column
    def Unique(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Column
    def PrimaryKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Column
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ColumnStart(builder): builder.StartObject(11)
def Start(builder):
    return ColumnStart(builder)
def ColumnAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ColumnAddName(builder, name)
def ColumnAddType(builder, type): builder.PrependUint8Slot(1, type, 0)
def AddType(builder, type):
    return ColumnAddType(builder, type)
def ColumnAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def AddTitle(builder, title):
    return ColumnAddTitle(builder, title)
def ColumnAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return ColumnAddDescription(builder, description)
def ColumnAddWidth(builder, width): builder.PrependInt32Slot(4, width, -1)
def AddWidth(builder, width):
    return ColumnAddWidth(builder, width)
def ColumnAddPrecision(builder, precision): builder.PrependInt32Slot(5, precision, -1)
def AddPrecision(builder, precision):
    return ColumnAddPrecision(builder, precision)
def ColumnAddScale(builder, scale): builder.PrependInt32Slot(6, scale, -1)
def AddScale(builder, scale):
    return ColumnAddScale(builder, scale)
def ColumnAddNullable(builder, nullable): builder.PrependBoolSlot(7, nullable, 1)
def AddNullable(builder, nullable):
    return ColumnAddNullable(builder, nullable)
def ColumnAddUnique(builder, unique): builder.PrependBoolSlot(8, unique, 0)
def AddUnique(builder, unique):
    return ColumnAddUnique(builder, unique)
def ColumnAddPrimaryKey(builder, primaryKey): builder.PrependBoolSlot(9, primaryKey, 0)
def AddPrimaryKey(builder, primaryKey):
    return ColumnAddPrimaryKey(builder, primaryKey)
def ColumnAddMetadata(builder, metadata): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)
def AddMetadata(builder, metadata):
    return ColumnAddMetadata(builder, metadata)
def ColumnEnd(builder): return builder.EndObject()
def End(builder):
    return ColumnEnd(builder)